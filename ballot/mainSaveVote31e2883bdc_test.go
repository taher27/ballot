// Test generated by RoostGPT for test roost-test using AI Model gpt

package main

import (
	"sync"
	"testing"
)

type Vote struct {
	CandidateID string
}

var (
	candidateVotesStore map[string]int
	storeMutex          sync.Mutex
)

func getCandidatesVote() map[string]int {
	storeMutex.Lock()
	defer storeMutex.Unlock()
	if candidateVotesStore == nil {
		candidateVotesStore = make(map[string]int)
	}
	return candidateVotesStore
}

func saveVote(vote Vote) error {
	candidateVotesStore = getCandidatesVote()
	candidateVotesStore[vote.CandidateID]++
	return nil
}

func TestSaveVote31e2883bdc(t *testing.T) {
	// Test case 1: Save a new vote for a candidate
	vote1 := Vote{CandidateID: "candidate1"}
	err := saveVote(vote1)
	if err != nil {
		t.Error("Failed to save vote for candidate1")
	}

	// Check if the vote count is incremented
	if candidateVotesStore[vote1.CandidateID] != 1 {
		t.Errorf("Expected vote count for candidate1 to be 1, but got %d", candidateVotesStore[vote1.CandidateID])
	}

	// Test case 2: Save another vote for the same candidate
	err = saveVote(vote1)
	if err != nil {
		t.Error("Failed to save vote for candidate1")
	}

	// Check if the vote count is incremented
	if candidateVotesStore[vote1.CandidateID] != 2 {
		t.Errorf("Expected vote count for candidate1 to be 2, but got %d", candidateVotesStore[vote1.CandidateID])
	}

	// Test case 3: Save a vote for a different candidate
	vote2 := Vote{CandidateID: "candidate2"}
	err = saveVote(vote2)
	if err != nil {
		t.Error("Failed to save vote for candidate2")
	}

	// Check if the vote count is incremented
	if candidateVotesStore[vote2.CandidateID] != 1 {
		t.Errorf("Expected vote count for candidate2 to be 1, but got %d", candidateVotesStore[vote2.CandidateID])
	}
}